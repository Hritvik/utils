plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'maven-publish'
}

group = 'com.vik'
version = '0.0.1-SNAPSHOT'
archivesBaseName = 'utils'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
	sourceCompatibility = '21'
	withSourcesJar()
	withJavadocJar()
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:2024.0.1"
	}
}

dependencies {
	// Spring Boot + WebFlux
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.springframework.cloud:spring-cloud-context'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.cloud:spring-cloud-starter-bus-kafka'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.cloud:spring-cloud-starter-function-webflux'
	implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j'

	// Micrometer
	implementation 'io.micrometer:micrometer-core'
	implementation 'io.micrometer:micrometer-registry-prometheus'

	// Apache utils
	implementation 'org.apache.commons:commons-lang3'
	implementation 'org.apache.httpcomponents.client5:httpclient5'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Optional: for Spring Boot config metadata (e.g., IDE autocomplete)
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	// Test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

// Configure Javadoc to work with Lombok
tasks.named('javadoc') {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

// Disable the bootJar task since we want to create a library JAR
bootJar {
	enabled = false
}

// Enable the jar task
jar {
	enabled = true
	archiveClassifier = ''
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			artifactId = 'utils'
			versionMapping {
				usage("java-api") {
					fromResolutionOf("runtimeClasspath")
				}
				usage("java-runtime") {
					fromResolutionResult()
				}
			}
			pom {
				name = 'Utils Library'
				description = 'A utility library for Vik Internal Services'
				url = 'https://github.com/Hritvik/utils'
				licenses {
					license {
						name = 'The Apache License, Version 2.0'
						url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}
			}
		}
	}
	repositories {
		maven {
			// You can configure your Maven repository here
			// For local testing, you can use:
			url = "${buildDir}/repo"
		}
	}
}
